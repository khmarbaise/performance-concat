performance-concat (master *)$ ~/tools/jdk-11.0.5+10/Contents/Home/bin/java -jar target/performance-concat-1.0-SNAPSHOT.jar 
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/Users/khmarbaise/ws-git-soebes/examples/performance/performance-concat/target/performance-concat-1.0-SNAPSHOT.jar) to field java.io.Console.cs
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.23
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /Users/khmarbaise/tools/jdk-11.0.5+10/Contents/Home/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.soebes.performance.streams.BenchmarkStreamConcat.with_new_arraylist

# Run progress: 0.00% complete, ETA 00:08:00
# Fork: 1 of 3
# Warmup Iteration   1: 21.641 us/op
# Warmup Iteration   2: 21.301 us/op
# Warmup Iteration   3: 21.447 us/op
Iteration   1: 21.842 us/op
Iteration   2: 24.011 us/op
Iteration   3: 22.110 us/op
Iteration   4: 22.718 us/op
Iteration   5: 25.478 us/op

# Run progress: 16.67% complete, ETA 00:06:43
# Fork: 2 of 3
# Warmup Iteration   1: 22.550 us/op
# Warmup Iteration   2: 22.388 us/op
# Warmup Iteration   3: 21.315 us/op
Iteration   1: 22.267 us/op
Iteration   2: 21.277 us/op
Iteration   3: 21.636 us/op
Iteration   4: 24.145 us/op
Iteration   5: 22.398 us/op

# Run progress: 33.33% complete, ETA 00:05:22
# Fork: 3 of 3
# Warmup Iteration   1: 22.011 us/op
# Warmup Iteration   2: 21.013 us/op
# Warmup Iteration   3: 21.328 us/op
Iteration   1: 20.878 us/op
Iteration   2: 21.023 us/op
Iteration   3: 22.839 us/op
Iteration   4: 20.913 us/op
Iteration   5: 21.719 us/op


Result "com.soebes.performance.streams.BenchmarkStreamConcat.with_new_arraylist":
  22.350 ±(99.9%) 1.415 us/op [Average]
  (min, avg, max) = (20.878, 22.350, 25.478), stdev = 1.323
  CI (99.9%): [20.935, 23.765] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /Users/khmarbaise/tools/jdk-11.0.5+10/Contents/Home/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.soebes.performance.streams.BenchmarkStreamConcat.with_stream_concat

# Run progress: 50.00% complete, ETA 00:04:01
# Fork: 1 of 3
# Warmup Iteration   1: 18.228 us/op
# Warmup Iteration   2: 17.928 us/op
# Warmup Iteration   3: 18.183 us/op
Iteration   1: 18.294 us/op
Iteration   2: 17.747 us/op
Iteration   3: 17.674 us/op
Iteration   4: 17.563 us/op
Iteration   5: 17.486 us/op

# Run progress: 66.67% complete, ETA 00:02:41
# Fork: 2 of 3
# Warmup Iteration   1: 17.286 us/op
# Warmup Iteration   2: 16.846 us/op
# Warmup Iteration   3: 16.897 us/op
Iteration   1: 17.063 us/op
Iteration   2: 16.968 us/op
Iteration   3: 16.844 us/op
Iteration   4: 16.891 us/op
Iteration   5: 16.762 us/op

# Run progress: 83.33% complete, ETA 00:01:20
# Fork: 3 of 3
# Warmup Iteration   1: 12.826 us/op
# Warmup Iteration   2: 12.584 us/op
# Warmup Iteration   3: 12.541 us/op
Iteration   1: 12.487 us/op
Iteration   2: 12.511 us/op
Iteration   3: 12.479 us/op
Iteration   4: 12.491 us/op
Iteration   5: 12.481 us/op


Result "com.soebes.performance.streams.BenchmarkStreamConcat.with_stream_concat":
  15.716 ±(99.9%) 2.561 us/op [Average]
  (min, avg, max) = (12.479, 15.716, 18.294), stdev = 2.395
  CI (99.9%): [13.155, 18.277] (assumes normal distribution)


# Run complete. Total time: 00:08:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt   Score   Error  Units
BenchmarkStreamConcat.with_new_arraylist  avgt   15  22.350 ± 1.415  us/op
BenchmarkStreamConcat.with_stream_concat  avgt   15  15.716 ± 2.561  us/op

Benchmark result is saved to jmh-result.text

